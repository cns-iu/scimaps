{"version":3,"file":"default-projects_scimaps_src_app_pages_blogs_blogs-resolver_service_ts-projects_scimaps_src_a-0d2b66.js","mappings":"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","sources":["./projects/scimaps/src/app/pages/blogs/blog-resolver.service.ts","./projects/scimaps/src/app/pages/blogs/blogs-resolver.service.ts","./projects/scimaps/src/app/shared/components/blog-tile/blog-tile.component.ts","./projects/scimaps/src/app/shared/components/blog-tile/blog-tile.component.html","./projects/scimaps/src/app/shared/components/blog-tile/blog-tile.module.ts","./projects/scimaps/src/app/shared/components/drawer-header/drawer-header.component.ts","./projects/scimaps/src/app/shared/components/drawer-header/drawer-header.component.html","./projects/scimaps/src/app/shared/components/drawer-header/drawer-header.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  Params,\n  Resolve\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { getSegmentedDate, isHttp } from '../../constants/utils';\nimport { ContentService, toSlug } from '../../shared/services/content.service';\nimport { Blog } from './blogs-resolver.service';\n\nexport const getBlogImageSource = (blog: Blog, directory = ''): { sm: string, lg: string }[] => {\n  const [year, month, date] = getSegmentedDate(blog.date);\n  const slug = toSlug(blog.title);\n  let result: {sm: string, lg: string}[] = [];\n  if (Array.isArray(blog.blogImages) && blog.blogImages.length) {\n    result = blog.blogImages.map((image: { sm: string; lg: string }) => {\n      let sm = image.sm;\n      let lg = image.lg;\n      if (!isHttp(image.sm)) {\n        sm = `${directory}/${year}/${month}-${date}/${slug}/${image.sm}`;\n      }\n      if (!isHttp(image.lg)) {\n        lg = `${directory}/${year}/${month}-${date}/${slug}/${image.lg}`;\n      }\n      return { sm, lg };\n    });\n  }\n  return result;\n};\n\nexport const toBlog = (blogItem: Params, directory = ''): Blog => {\n  const blog: Blog = {\n    publish_date: blogItem.publish_date,\n    title: blogItem.title,\n    date: blogItem.date,\n    published: blogItem.published,\n    body: blogItem.body,\n    blogImages: blogItem.blogImages,\n    slug: toSlug(blogItem.title)\n  };\n  blog.blogImages = getBlogImageSource(blog, directory);\n  return blog;\n};\n@Injectable({\n  providedIn: 'root',\n})\nexport class BlogResolverService implements Resolve<Blog> {\n  constructor(private contentService: ContentService) { }\n\n  mdPath = '';\n  directory = 'assets/content/blog';\n\n  resolve(\n    route: Params\n  ): Blog | Observable<Blog> | Promise<Blog> {\n    const { year, month, slug } = route.params;\n    this.mdPath = `blog/${year}/${month}/${slug}/readme.md`;\n    return this.getResult(this.mdPath);\n  }\n  getResult(mdPath: string): Observable<Blog> {\n    return this.contentService.getContent<Params>(mdPath).pipe(\n      take(1),\n      map((blog: Params) => toBlog(blog, this.directory))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Params, Resolve } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ContentService } from '../../shared/services/content.service';\nimport { toBlog } from './blog-resolver.service';\n\n\nexport interface Blog {\n  title: string;\n  date: string;\n  body: string;\n  slug: string;\n  published: boolean;\n  publish_date: string;\n  blogImages: { sm: string, lg: string }[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BlogsResolverService implements Resolve<Blog[]> {\n\n  directory = 'assets/content/blog';\n\n  constructor(private contentService: ContentService) { }\n\n  resolve(route: Params): Observable<Blog[]> | Observable<never> {\n    const {blogsCount} = route.data;\n    return this.contentService.getIndex<Params>('app-blogs').pipe(\n      map((items: Params[]) => {\n        if (blogsCount && blogsCount > 0) {\n          return items.slice(0, blogsCount);\n        } else {\n          return items;\n        }\n      }),\n      map((items: Params[]) => {\n        return items.map((item: Params) => toBlog(item, this.directory));\n      }),\n      map((items: Blog[]) => {\n        return items.filter((item: Blog) => {\n          const today = new Date();\n          const todayUTC = Date.parse(today.toUTCString());\n          const publishedDate = new Date(item.publish_date);\n          publishedDate.setUTCHours(0, 0, 0, 0);\n          const publishDateUTC = Date.parse(publishedDate.toUTCString());\n          return todayUTC > publishDateUTC;\n        });\n      })\n    );\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { getSegmentedDate } from '../../../constants/utils';\nimport { Blog } from '../../../pages/blogs/blogs-resolver.service';\n@Component({\n  selector: 'sci-blog-tile',\n  templateUrl: './blog-tile.component.html',\n  styleUrls: ['./blog-tile.component.scss']\n})\nexport class BlogTileComponent {\n\n  @Input() blog!: Blog;\n\n  constructor(private router: Router) { }\n\n  get thumbnail(): string {\n    if (this.blog && this.blog.blogImages.length) {\n      return this.blog.blogImages[0].sm;\n    } else {\n      return '';\n    }\n  }\n  gotoBlog(): void {\n    if (this.blog) {\n      const [year, month, date] = getSegmentedDate(this.blog.date);\n      this.router.navigate(['/', 'learning-center', 'blogs', year, `${month}-${date}`, this.blog.slug]);\n    }\n  }\n}\n","<div (click)=\"gotoBlog()\" *ngIf=\"blog\">\n  <div class=\"image-container\">\n    <img [src]=\"thumbnail\" alt=\"Blog Thumbnail\" />\n  </div>\n  <div class=\"blog-title\">\n    <p>{{ blog?.title }}</p>\n  </div>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { BlogTileComponent } from './blog-tile.component';\n\n\n\n@NgModule({\n  declarations: [BlogTileComponent],\n  imports: [\n    CommonModule\n  ],\n  exports: [BlogTileComponent]\n})\nexport class BlogTileModule { }\n","import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\n\n\n@Component({\n  selector: 'sci-drawer-header',\n  templateUrl: './drawer-header.component.html',\n  styleUrls: ['./drawer-header.component.scss']\n})\nexport class DrawerHeaderComponent {\n\n  @HostBinding('class') className = 'sci-drawer-header';\n\n  @Input() title = '';\n  @Input() backText = '';\n  @Output() backClick: EventEmitter<string> = new EventEmitter();\n\n}\n","<div class=\"drawer-header\">\n    <div class=\"back-button\" (click)=\"backClick.emit('back')\">\n        <mat-icon class=\"back-icon\">chevron_left</mat-icon>\n        <div class=\"back-text\">{{backText | uppercase}}</div>\n    </div>\n    <div class=\"title\">\n        <h3>\n            {{title}}\n        </h3>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DrawerHeaderComponent } from './drawer-header.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { SharedModule } from '../../shared.module';\n\n\n\n@NgModule({\n  declarations: [DrawerHeaderComponent],\n  imports: [\n    CommonModule,\n    MatIconModule,\n    SharedModule\n  ],\n  exports: [DrawerHeaderComponent]\n})\nexport class DrawerHeaderModule { }\n"],"names":[],"sourceRoot":"webpack:///"}